import heapq

class PriorityQueue:
    '''
    우선순위 큐를 파이썬의 heapq 모듈을 활용하여 구현합니다.
    이 구현에서는 값의 절대값을 기준으로 우선순위를 결정합니다.
    '''
    
    def __init__(self) :
        '''
        우선순위 큐 초기화
        self.data: 힙 구조로 데이터를 저장할 빈 리스트를 생성합니다.
        파이썬의 heapq 모듈은 최소 힙(min heap)을 구현합니다.
        '''
        self.data = []

    def push(self, value) :
        '''
        우선순위 큐에 값을 추가합니다.
        
        매개변수:
            value: 큐에 추가할 값
            
        동작 과정:
            1. 입력된 값의 절대값과 원래 값을 튜플로 묶어 저장합니다.
            2. 절대값을 첫 번째 요소로 사용하여 절대값 기준으로 정렬되도록 합니다.
            3. 원래 값도 함께 저장하여 나중에 참조할 수 있게 합니다.
            
        시간 복잡도: O(log n), 여기서 n은 힙의 크기입니다.
        '''
        heapq.heappush(self.data, (abs(value), value))
        # heapq는 튜플의 첫 번째 요소(절대값)를 기준으로 정렬합니다.
        # 따라서 절대값이 가장 작은 요소가 루트에 위치하게 됩니다.
        

    def pop(self) :
        '''
        우선순위가 가장 높은 원소(절대값이 가장 작은 원소)를 제거합니다.
        
        동작 과정:
            1. 큐가 비어있지 않은 경우에만 작업을 수행합니다.
            2. heapq.heappop() 함수를 사용하여 최소값(루트 노드)을 제거합니다.
            3. 이 함수는 힙의 속성을 유지하며 자동으로 재구성합니다.
            
        반환값:
            없음 (제거만 수행)
            
        시간 복잡도: O(log n), 여기서 n은 힙의 크기입니다.
        '''
        if len(self.data) > 0:
            heapq.heappop(self.data)
            # heapq.heappop()은 힙에서 가장 작은 요소를 제거하고 반환합니다.
            # 이 구현에서는 반환값을 사용하지 않고 제거만 수행합니다.
            

    def top(self) :
        '''
        우선순위가 가장 높은 원소(절대값이 가장 작은 원소)의 원래 값을 반환합니다.
        
        동작 과정:
            1. 큐가 비어있는 경우 -1을 반환합니다.
            2. 비어있지 않은 경우, 최소 힙의 루트 노드에 있는 튜플의 두 번째 요소(원래 값)를 반환합니다.
            
        반환값:
            - 큐가 비어있는 경우: -1
            - 그렇지 않은 경우: 우선순위가 가장 높은 원소의 원래 값
            
        시간 복잡도: O(1), 상수 시간에 루트 노드에 접근합니다.
        '''
        if len(self.data) == 0 :
            return -1
        else :
            return self.data[0][1]
            # self.data[0]은 루트 노드의 튜플 (abs(value), value)에 접근합니다.
            # self.data[0][1]은 이 튜플의 두 번째 요소인 원래 값을 반환합니다.